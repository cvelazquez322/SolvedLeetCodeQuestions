# A self-dividing number is a number that is divisible by every digit it contains.

# For example, 128 is a self-dividing number because 128 % 1 == 0, 128 % 2 == 0, and 128 % 8 == 0.

# Also, a self-dividing number is not allowed to contain the digit zero.

# Given a lower and upper number bound, output a list of every possible self dividing number, including the bounds if possible.


def selfdiv(aint):
    aintlist = list(str(aint))
    for x in aintlist:
        if int(x) == 0:
            return False
        if aint % int(x) != 0:
            return False
    return True

class Solution:
    def selfDividingNumbers(self, left: int, right: int) -> List[int]:
        if left == 0 and right == 0:
            return 0
        mini = min(left, right)
        maxi = max(left, right)
        rlist = []
        
        i = mini
        
        while maxi >= i:
            if selfdiv(i):
                rlist.append(i)
            i+= 1
        return rlist
        
        